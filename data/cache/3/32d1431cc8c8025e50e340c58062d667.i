a:186:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Saturday, 30th April, 2022";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:13:"wrap_spanwrap";i:1;a:2:{i:0;i:1;i:1;s:2:"lo";}i:2;i:1;i:3;s:9:"<wrap lo>";}i:2;i:44;}i:5;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" This is the first dev log ";}i:2;i:53;}i:6;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:13:"wrap_spanwrap";i:1;a:2:{i:0;i:4;i:1;s:0:"";}i:2;i:4;i:3;s:7:"</wrap>";}i:2;i:80;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:87;}i:8;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:88;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:"Today I started this log I guess";}i:2;i:91;}i:10;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:123;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" The plan is two fold. I want to learn the ";}i:2;i:126;}i:12;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:23:"https://bevyengine.org/";i:1;s:5:" bevy";}i:2;i:169;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:159:" framework and also break down super letter linker to try and make an exact copy of it. I am a lazy piece of shit so lets see how well this goes!! ðŸ¤žðŸ¤žðŸ¤ž";}i:2;i:203;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:362;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:362;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:"Bevy is a strange engine to me. I do not have any experience with entity component systems but this seems like a cool paradigm.I am mostly using it to use rust to compile down to web assembly. Rust makes me feel like a 90s hacker kid. ";}i:2;i:364;}i:17;a:3:{i:0;s:4:"nest";i:1;a:1:{i:0;a:3:{i:0;a:3:{i:0;s:13:"footnote_open";i:1;a:0:{}i:2;i:599;}i:1;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"also dokuwiki is pretty cool";}i:2;i:601;}i:2;a:3:{i:0;s:14:"footnote_close";i:1;a:0:{}i:2;i:629;}}}i:2;i:599;}i:18;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:631;}i:19;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:631;}i:20;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:24:":devlogs:ecs_example.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:633;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:673;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:673;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"Everything I learn is basically a brain copy pasta of what is on ";}i:2;i:675;}i:24;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:50:"https://bevyengine.org/learn/book/getting-started/";i:1;s:10:" this site";}i:2;i:740;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:", so your better of reading that but if you so inclined for some god for-saken reason then yea keep reading";}i:2;i:806;}i:26;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:913;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:".. bro. ";}i:2;i:916;}i:28;a:3:{i:0;s:4:"nest";i:1;a:1:{i:0;a:8:{i:0;a:3:{i:0;s:13:"footnote_open";i:1;a:0:{}i:2;i:924;}i:1;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"AGAIN EVERYTHING YOU READ HERE IS WRONG";}i:2;i:926;}i:2;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:965;}i:3;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"jk";}i:2;i:968;}i:4;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:970;}i:5;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:973;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:976;}i:7;a:3:{i:0;s:14:"footnote_close";i:1;a:0:{}i:2;i:977;}}}i:2;i:924;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:979;}i:30;a:3:{i:0;s:4:"nest";i:1;a:1:{i:0;a:3:{i:0;a:3:{i:0;s:13:"footnote_open";i:1;a:0:{}i:2;i:980;}i:1;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"or am i?";}i:2;i:982;}i:2;a:3:{i:0;s:14:"footnote_close";i:1;a:0:{}i:2;i:990;}}}i:2;i:980;}i:31;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:992;}i:32;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:994;}i:33;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:3:"ECS";i:1;i:3;i:2;i:994;}i:2;i:994;}i:34;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:994;}i:35;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1008;}i:36;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Basically I think";i:1;i:5;i:2;i:1008;}i:2;i:1008;}i:37;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:1008;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1008;}i:39;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1033;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Component";}i:2;i:1035;}i:41;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1044;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" : Blocks of data that make sense. eg in bevy:";}i:2;i:1046;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1098;}i:44;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:37:"
#[derive(Component)]
struct Person;
";i:1;s:4:"rust";i:2;N;}i:2;i:1098;}i:45;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1098;}i:46;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1152;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Entity";}i:2;i:1154;}i:48;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1160;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" : the objects them selves. They are made up of components. eg in bevy:";}i:2;i:1162;}i:50;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1239;}i:51;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:80:"
commands.spawn().insert(Person).insert(Name("Elaina Protractor".to_string()));
";i:1;s:4:"rust";i:2;N;}i:2;i:1239;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1239;}i:53;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:13:"wrap_spanwrap";i:1;a:2:{i:0;i:1;i:1;s:2:"lo";}i:2;i:1;i:3;s:9:"<wrap lo>";}i:2;i:1333;}i:54;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:"The above code basically spawns an entity with a person and name component. ";}i:2;i:1342;}i:55;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:1418;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"the name component takes a string as a parameter";}i:2;i:1421;}i:57;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:13:"wrap_spanwrap";i:1;a:2:{i:0;i:4;i:1;s:0:"";}i:2;i:4;i:3;s:7:"</wrap>";}i:2;i:1469;}i:58;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1476;}i:59;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1476;}i:60;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1480;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Systems";}i:2;i:1482;}i:62;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1489;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:": Systems transform the data in components. ";}i:2;i:1491;}i:64;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1541;}i:65;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:131:"
fn greet_people(query: Query<&Name, With<Person>>){
    for name in query.iter() {
        println!("hello {}!", name.0);
    }
}
";i:1;s:4:"rust";i:2;N;}i:2;i:1541;}i:66;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1541;}i:67;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:13:"wrap_spanwrap";i:1;a:2:{i:0;i:1;i:1;s:2:"lo";}i:2;i:1;i:3;s:9:"<wrap lo>";}i:2;i:1687;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"The above code is a system that loops through any entity with the components Name and Person and prints ";}i:2;i:1696;}i:69;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1800;}i:70;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Hello name";}i:2;i:1801;}i:71;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1811;}i:72;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:13:"wrap_spanwrap";i:1;a:2:{i:0;i:4;i:1;s:0:"";}i:2;i:4;i:3;s:7:"</wrap>";}i:2;i:1812;}i:73;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1819;}i:74;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1821;}i:75;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Plugins";i:1;i:3;i:2;i:1821;}i:2;i:1821;}i:76;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1821;}i:77;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1821;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"Plugins are the life of bevy. Everything is a plugin the renderers, UI ect";}i:2;i:1839;}i:79;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:1913;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" We can add ";}i:2;i:1916;}i:81;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1928;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"DefaultPlugins";}i:2;i:1929;}i:83;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1943;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" to include the basic shtuff and it will also make a window and make the game loop I think";}i:2;i:1944;}i:85;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:2034;}i:86;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2037;}i:87;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2037;}i:88;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2039;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"To make our own plugin";}i:2;i:2041;}i:90;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2063;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:2065;}i:92;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2072;}i:93;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:221:" 
pub struct HelloPlugin;

impl Plugin for HelloPlugin {
    fn build(&self, app: &mut App) {
        app.add_startup_system(add_people)
            .add_system(hello_world)
            .add_system(greet_people);
    }
}
";i:1;s:4:"rust";i:2;N;}i:2;i:2072;}i:94;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2308;}i:95;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:9:"Resources";i:1;i:3;i:2;i:2308;}i:2;i:2308;}i:96;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2308;}i:97;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2308;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"Resources are globally unique data of some kind.";}i:2;i:2328;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2376;}i:100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2376;}i:101;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:13:"wrap_spanwrap";i:1;a:2:{i:0;i:1;i:1;s:2:"lo";}i:2;i:1;i:3;s:9:"<wrap lo>";}i:2;i:2378;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" taken directly from book ";}i:2;i:2387;}i:103;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:13:"wrap_spanwrap";i:1;a:2:{i:0;i:4;i:1;s:0:"";}i:2;i:4;i:3;s:7:"</wrap>";}i:2;i:2413;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:2420;}i:105;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:2421;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"
Here are some examples of data that could be encoded as Resources:";}i:2;i:2423;}i:107;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2491;}i:108;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2491;}i:109;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2491;}i:110;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2491;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Elapsed Time";}i:2;i:2495;}i:112;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2508;}i:113;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2508;}i:114;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2508;}i:115;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2508;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" Asset Collections (sounds, textures, meshes)";}i:2;i:2512;}i:117;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2557;}i:118;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2557;}i:119;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2557;}i:120;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2557;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Renderers";}i:2;i:2561;}i:122;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2571;}i:123;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2571;}i:124;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2571;}i:125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2571;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:"This example takes the above greet_people function and makes it repeat every 2 seconds by using the timer resource that the DefaultPlugins provide";}i:2;i:2573;}i:127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2725;}i:128;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:391:"
fn greet_people(
    time: Res<Time>, mut timer: ResMut<GreetTimer>, query: Query<&Name, With<Person>>) {
    // update our timer with the time elapsed since the last update
    // if that caused the timer to finish, we say hello to everyone
    if timer.0.tick(time.delta()).just_finished() {
        for name in query.iter() {
            println!("hello {}!", name.0);
        }
    }
}
";i:1;s:4:"rust";i:2;N;}i:2;i:2725;}i:129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2725;}i:130;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:3131;}i:131;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3133;}i:132;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3135;}i:133;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"TUTORIAL - Snake";i:1;i:3;i:2;i:3135;}i:2;i:3135;}i:134;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3135;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3135;}i:136;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:47:"https://mbuffett.com/posts/bevy-snake-tutorial/";i:1;s:20:" following this link";}i:2;i:3162;}i:137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3235;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3235;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:"I am following this tutorial to make a snake game to get an idea of how games are made in bevy while also seeing wtf rust is about.";}i:2;i:3237;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3368;}i:141;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3370;}i:142;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Some interesting snippits";i:1;i:5;i:2;i:3370;}i:2;i:3370;}i:143;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:5;}i:2;i:3370;}i:144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3370;}i:145;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3402;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"code for sizing sprites in our tile system";}i:2;i:3404;}i:147;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3446;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:3448;}i:149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3454;}i:150;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:413:"
fn size_scaling(windows: Res<Windows>, mut q: Query<(&Size, &mut Transform)>) {
    let window = windows.get_primary().unwrap();
    for (sprite_size, mut transform) in q.iter_mut() {
        transform.scale = Vec3::new(
            sprite_size.width / ARENA_WIDTH as f32 * window.width() as f32,
            sprite_size.height / ARENA_HEIGHT as f32 * window.height() as f32,
            1.0,
        );
    }
}
";i:1;s:4:"rust";i:2;N;}i:2;i:3454;}i:151;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3454;}i:152;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:"The sizing logic goes like so: if something has a width of 1 in a grid of 40, and the window is 400px across, then it should have a width of 10.
";}i:2;i:3882;}i:153;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4027;}i:154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:4029;}i:155;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4030;}i:156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4032;}i:157;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4032;}i:158;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"Im gonna leave this at here for now and pick it up later";}i:2;i:4034;}i:159;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4090;}i:160;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4092;}i:161;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"External links";i:1;i:3;i:2;i:4092;}i:2;i:4092;}i:162;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4092;}i:163;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4092;}i:164;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:31:"https://bevyengine.org/examples";i:1;s:9:" examples";}i:2;i:4117;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4163;}i:166;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4164;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:4166;}i:168;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:33:"https://docs.rs/bevy/latest/bevy/";i:1;s:5:" docs";}i:2;i:4167;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4211;}i:170;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4212;}i:171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:4214;}i:172;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:73:"https://github.com/bevyengine/bevy/blob/latest/examples/games/breakout.rs";i:1;s:24:" breakout source example";}i:2;i:4215;}i:173;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4318;}i:174;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4319;}i:175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:4321;}i:176;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:30:"https://bevyengine.org/assets/";i:1;s:19:" Plugins and Assets";}i:2;i:4322;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4377;}i:178;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4378;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"
";}i:2;i:4380;}i:180;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:33:"https://bevy-cheatbook.github.io/";i:1;s:10:" Cheatbook";}i:2;i:4381;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4430;}i:182;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:4431;}i:183;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4434;}i:184;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4440;}i:185;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:4440;}}