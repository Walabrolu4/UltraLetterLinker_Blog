a:103:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Sunday, May 15th 2022";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:38;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:1:"k";i:1;i:3;i:2;i:38;}i:2;i:38;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:38;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"have you play this game? ";}i:2;i:51;}i:8;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:55:"https://store.steampowered.com/app/1154810/Going_Under/";i:1;s:4:"this";}i:2;i:76;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:". its pretty funny.";}i:2;i:140;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:159;}i:11;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:161;}i:12;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:11:"Collections";i:1;i:2;i:2;i:161;}i:2;i:161;}i:13;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:161;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:161;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:"Collections are like arrays or tuples whose size do not need to be known at compile time. The two types are";}i:2;i:186;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:294;}i:17;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:294;}i:18;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:294;}i:19;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:294;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Vectors";}i:2;i:298;}i:21;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:306;}i:22;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:306;}i:23;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:306;}i:24;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:306;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" HashMap (like Dictionaries in c#)";}i:2;i:310;}i:26;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:344;}i:27;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:344;}i:28;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:344;}i:29;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:347;}i:30;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Vectors";i:1;i:3;i:2;i:347;}i:2;i:347;}i:31;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:347;}i:32;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:347;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"Vectors are resizable arrays whos length do not need to be known at compile time but the size of its type needs to be known.";}i:2;i:366;}i:34;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:490;}i:35;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:490;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"You can init a vector with the vec! macro. eg";}i:2;i:492;}i:37;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:537;}i:38;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:25:" let x = vec![20,50,20]; ";i:1;s:4:"rust";i:2;N;}i:2;i:544;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:544;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"You can access a certain element like ";}i:2;i:584;}i:41;a:3:{i:0;s:12:"deleted_open";i:1;a:0:{}i:2;i:622;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"dish";}i:2;i:627;}i:43;a:3:{i:0;s:13:"deleted_close";i:1;a:0:{}i:2;i:631;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:637;}i:45;a:3:{i:0;s:12:"deleted_open";i:1;a:0:{}i:2;i:638;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"rish";}i:2;i:643;}i:47;a:3:{i:0;s:13:"deleted_close";i:1;a:0:{}i:2;i:647;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:653;}i:49;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:654;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:656;}i:51;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:660;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"*";}i:2;i:662;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:663;}i:54;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:23:" println!("{}",x[0]);  ";i:1;s:4:"rust";i:2;N;}i:2;i:670;}i:55;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:670;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"You can iterate through every value like ";}i:2;i:708;}i:57;a:3:{i:0;s:12:"deleted_open";i:1;a:0:{}i:2;i:749;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"dish";}i:2;i:754;}i:59;a:3:{i:0;s:13:"deleted_close";i:1;a:0:{}i:2;i:758;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:764;}i:61;a:3:{i:0;s:12:"deleted_open";i:1;a:0:{}i:2;i:765;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"rish";}i:2;i:770;}i:63;a:3:{i:0;s:13:"deleted_close";i:1;a:0:{}i:2;i:774;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:780;}i:65;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:781;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"this";}i:2;i:783;}i:67;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:787;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"* ";}i:2;i:789;}i:69;a:3:{i:0;s:4:"nest";i:1;a:1:{i:0;a:3:{i:0;a:3:{i:0;s:13:"footnote_open";i:1;a:0:{}i:2;i:791;}i:1;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"haha, I'm so quirky";}i:2;i:793;}i:2;a:3:{i:0;s:14:"footnote_close";i:1;a:0:{}i:2;i:812;}}}i:2;i:791;}i:70;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:814;}i:71;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:814;}i:72;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:61:"https://doc.rust-lang.org/stable/rust-by-example/std/vec.html";i:1;s:36:"stolen from the rust by example book";}i:2;i:816;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:918;}i:74;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:924;}i:75;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:510:" 
// `Vector`s can be easily iterated over
println!("Contents of xs:");
for v in x.iter() {
 println!("> {}", x);
}

// A `Vector` can also be iterated over while the iteration
// count is enumerated in a separate variable (`i`)
for (i, v) in x.iter().enumerate() {
 println!("In position {} we have value {}", i, x);
}

// Thanks to `iter_mut`, mutable `Vector`s can also be iterated
// over in a way that allows modifying each value
for v in xs.iter_mut() {
 *v *= 3;
}
println!("Updated vector: {:?}", xs);
";i:1;s:4:"rust";i:2;N;}i:2;i:924;}i:76;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1449;}i:77;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"HashMap";i:1;i:3;i:2;i:1449;}i:2;i:1449;}i:78;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1449;}i:79;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1449;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"Like dictionaries these use key value pairs. ";}i:2;i:1468;}i:81;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1513;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1513;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"To make one";}i:2;i:1515;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1532;}i:85;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:156:"
let mut name_and_age = HashMap::new();

name_and_age.insert("Gassica",22);
name_and_age.insert("Alex",12);

name_and_age.get("Alex") //ACCESSING THE VALUE
";i:1;s:4:"rust";i:2;N;}i:2;i:1532;}i:86;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1532;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"You can also insert ";}i:2;i:1703;}i:88;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:1723;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"entry";}i:2;i:1724;}i:90;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:1729;}i:91;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1730;}i:92;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:83:"
name_and_age.entry(String::from("thomas")).or_insert(20); //Insert only if unique
";i:1;s:4:"rust";i:2;N;}i:2;i:1737;}i:93;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1737;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:199:"which is bascially insert if unique. The aims to finish this by may atleast. (given I spend only a little time a week on it) will prollly do some exercizes thru the week without typing my noon-sense.";}i:2;i:1835;}i:95;a:3:{i:0;s:4:"nest";i:1;a:1:{i:0;a:3:{i:0;a:3:{i:0;s:13:"footnote_open";i:1;a:0:{}i:2;i:2034;}i:1;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"but typing this is fun fun fun fun";}i:2;i:2036;}i:2;a:3:{i:0;s:14:"footnote_close";i:1;a:0:{}i:2;i:2070;}}}i:2;i:2034;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:2072;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2073;}i:98;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2073;}i:99;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:33:":devlogs:rustlings_excersizes.png";i:1;s:0:"";i:2;N;i:3;s:3:"400";i:4;N;i:5;s:5:"cache";i:6;s:6:"direct";}i:2;i:2075;}i:100;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2124;}i:101;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2129;}i:102;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:2129;}}