a:2:{s:7:"current";a:10:{s:4:"date";a:2:{s:7:"created";i:1651432769;s:8:"modified";i:1651977242;}s:7:"creator";s:3:"kau";s:4:"user";s:4:"root";s:11:"last_change";b:0;s:11:"contributor";a:1:{s:4:"root";s:3:"kau";}s:5:"title";s:20:"Sunday, May 1st 2022";s:11:"description";a:2:{s:15:"tableofcontents";a:2:{i:0;a:4:{s:3:"hid";s:19:"sunday_may_1st_2022";s:5:"title";s:20:"Sunday, May 1st 2022";s:4:"type";s:2:"ul";s:5:"level";i:1;}i:1;a:4:{s:3:"hid";s:4:"shit";s:5:"title";s:4:"Shit";s:4:"type";s:2:"ul";s:5:"level";i:3;}}s:8:"abstract";s:503:"Sunday, May 1st 2022

Still following this  tutorial. 

Shit

 
fn position_translation(windows: Res<Windows>, mut q: Query<(&Position, &mut Transform)>) {
    fn convert(pos: f32, bound_window: f32, bound_game: f32) -> f32 {
        let tile_size = bound_window / bound_game;
        pos / bound_game * bound_window - (bound_window / 2.) + (tile_size / 2.)
    }
    let window = windows.get_primary().unwrap();
    for (pos, mut transform) in q.iter_mut() {
        transform.translation = Vec3::neâ€¦";}s:8:"relation";a:2:{s:5:"media";a:1:{s:20:"devlogs:snaketut.png";b:1;}s:10:"firstimage";s:20:"devlogs:snaketut.png";}s:17:"plugin_discussion";a:2:{s:6:"status";i:1;s:5:"title";s:6:" Hallo";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}}s:10:"persistent";a:5:{s:4:"date";a:2:{s:7:"created";i:1651432769;s:8:"modified";i:1651977242;}s:7:"creator";s:3:"kau";s:4:"user";s:4:"root";s:11:"last_change";b:0;s:11:"contributor";a:1:{s:4:"root";s:3:"kau";}}}